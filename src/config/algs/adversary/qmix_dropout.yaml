name: QMIX_dropout

# entity dropout
entity_dropout_train: True # entity dropout
entity_dropout_inference: True # entity dropout
train_dropout_type: damoed # damoed or random
test_dropout_type: damoed # damoed or random
test_dropout_domain_aware: True
dropout_flicker: True # change dropout entity (partial obs) every timestep
flicker_interval: 1

# use epsilon greedy action selector
action_selector: "epsilon_greedy"
epsilon_start: 1.0 
epsilon_finish: 0.05
epsilon_anneal_time: 1000000 
epsilon_anneal_start: 0

runner: "parallel"
batch_size_run: 8
training_iters: 8

entity_last_action: True # Include the user-controlled agents' last actions (one_hot) in their entities

batch_size: 32 # Number of episodes to train on
buffer_size: 5000 
t_max: 1000000 # Stop running after this many timesteps

# update the target network every {} episodes
target_update_interval: 200

# use the Q_Learner to train
agent_output_type: "q"
learner: "q_learner"
double_q: True 
mixer: "qmix" 
mixing_embed_dim: 32
hypernet_layers: 2 
hypernet_embed: 128 

rnn_input_dim: 128 
rnn_hidden_dim: 128

optimizer: "rmsprop"
lr: 0.0005 

# use the Q_Learner to train
reward_standardization: True # Reward Standardization

env_args:
  entity_scheme: False

